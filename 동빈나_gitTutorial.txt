**Git 설치 및 사용법 익히기 [Git으로 시작하는 협업 및 오픈소스 프로젝트 1강]**
-- cmd

-- 깃 설치 여부 점검
C:\Users\Playdata>git
-- 깃 버전 확인
C:\Users\Playdata>git --version
-- 깃 환경설정(configuration)
C:\Users\Playdata>git config --global user.name awakeng
C:\Users\Playdata>git config --global user.email awaken.gino@gmail.com
-- C드라이브에 연습용 Education 폴더 설치
-- 설치한 Education 폴더로 이동
C:\Users\Playdata>cd C:\Education
-- 만들어둔 repository 클론 생성/받아오기
C:\Education>git clone https://github.com/awakeng/Mini-Project---Web-Crawling.git
-- Education폴더에 클론 생성 확인.
-- 폴더-> 보기 -> 옵션 -> 알려진 파일 형식의 파일 확장명 숨기기 해제
-- 숨김항목 체크해서 숨긴항목 보이게 하기
-- document.txt 생성
-- 생성된 txt 파일에 "Hello World!" 작성.
-- 내 로컬 repository에서 업데이트된 변경사항을 remote repository(git 서버)에 알려주자
	-- 생성된 project 폴더(Mini-Project---Web-Crawling)로 이동
	C:\Education>cd Mini-Project---Web-Crawling
	C:\Education\Mini-Project---Web-Crawling>git add document.txt
	C:\Education\Mini-Project---Web-Crawling>git commit -m "Add Text File [document.txt]"
		커밋 성공.
		"Add Txt File [document.txt]는 나중에 오류가 생겼을 시 롤백하기 위한 깃발역할을 할 수 있는 메세지.
	푸시를 해서 사이트에 커밋된 파일을 올려준다.
	C:\Education\Mini-Project---Web-Crawling>git push
	

**소스코드 수정하여 Git 저장소에 반영하기 [Git으로 시작하는 협업 및 오픈소스 프로젝트 5강]**

-- C드라이브에 연습용 Tutorial 폴더 설치
	cmd 창에서 설치된 폴더로 이동
	클론
	C:\Tutorial>git clone https://github.com/awakeng/Mini-Project---Web-Crawling.git
	클론으로 내려받은 프로젝트 폴더로 이동
	C:\Tutorial>cd C:\Tutorial\Mini-Project---Web-Crawling

-- 프로젝트 폴더에 새로운 문서 생성 (my_module.java)
	변경사항 remote repository에 반영
		git status 명령어로 변경사항 있는지 확인
		C:\Tutorial\Mini-Project---Web-Crawling>git status
		git add로 변경사항 저장, 다시 git status로 저장 확인
		C:\Tutorial\Mini-Project---Web-Crawling>git add my_module.java
		C:\Tutorial\Mini-Project---Web-Crawling>git status
	
	(cf. 특정 파일을 add한 이후에 다지 staging area에서 내려오게 하려면 reset 명령어 이용)
	C:\Tutorial\Mini-Project---Web-Crawling>git reset my_module.java
	C:\Tutorial\Mini-Project---Web-Crawling>git status
		add 이전으로 돌아옴을 알 수 있다.
		
	git add filename.type 대신, git add . 를 통해 한 번에 모든 파일들을 add할 수 있다.
	C:\Tutorial\Mini-Project---Web-Crawling>git add .
	C:\Tutorial\Mini-Project---Web-Crawling>git status
	
	git commit & leave message
	C:\Tutorial\Mini-Project---Web-Crawling>git commit -m "Add my_module [Add]"
	
	add된 파일을 remote repository에 최종 업로드
	C:\Tutorial\Mini-Project---Web-Crawling>git push
	
	my_module 파일에 내용 추가하여 변경사항 만들기.
	git status 명령어로 확인됐는지 점검
	C:\Tutorial\Mini-Project---Web-Crawling>git status
	status 이후에는 git add와, git checkout --  의 두가지 명령어를 사용 할 수 있다.
	git checkout -- 은 수정된 내역을 무시할 수 도 있다.
	C:\Tutorial\Mini-Project---Web-Crawling>git checkout -- my_module.java
	명령어 실행 후 my_module.java를 열어보면 우리가 수정했던 내용이 다시 롤백 됐음을 확인할 수 있다.
	
	다음 실습을 위해 롤백됐던 내용을 다시 채워넣고, git add . 명령어로 변경사항 반영해준다. 
	C:\Tutorial\Mini-Project---Web-Crawling>git add .
	commit & push
	C:\Tutorial\Mini-Project---Web-Crawling>git status
		커밋 확인, 푸시 실행
	C:\Tutorial\Mini-Project---Web-Crawling>git push
	





- git branch
브랜치 status 점검

- git branch develop
branch develop 생성

- git checkout develop
head를 develop로 옮김

** merge **	(develop에서는 변경사항을 add했지만 master에 병합되지 않은 상태)

- git checkout master			(master로 돌아간다)	
	-- git merge develop		(develop 브랜치를 master에 병합)
		--- git log				(상황 체크)	
			---- git push		(develop에서 병합한 내용은 master에 반영한 후 git remote repository로 푸시)
				----- git branch -d develop	(사용이 끝난 branch는 삭제)
				
				
** branch 충돌(conflict) 관리 ** 

브랜치를 생성하고 브랜치와 마스터에서 독자적으로 동시에 작업이 이루어지고, 각각 add, commit을 할 경우
두 브랜치는 독자적인 파일이 되고 더 이상 한 뿌리를 공유하지 않게 된다.
이때 master로 checkout하여 merge를 시도하게 되면 conflict 발생 메시지가 뜨게되고 충돌한 내용에 대해 표시가 된다.
표시된 코드 중 하나를 수동으로 택하여 저장, add, commit하면 merge할 수 있게되고 이용이 다한 branch는 제거해주면 된다.






> git remote
<origin
> git remote show origin
< ~~~ w


0. remote repository 생성
1. 공동작업한 파일(happy.java) push (from 동성 노트북)
2. 진휘씨 노트북으로	 clone, local 생성
3. 작업 개별 착수
4. 동성 : branch develop_D 생성. 진휘 : branch develop_J 생성. 
5. 작업한 happy.java -> add + commit + merge + push  / develop_D 삭제 / 업데이트 사항 진휘씨한테 알림
6.
	-1. 진휘 : pull -> 작업 중인 branch와 conflict -> 수동 해결 -> add + commit + push 
	-2. 진휘 : fetch -> checkout fetch_head -> 변경 사항 확인
			-1. 변경사항 확인 원 작업 반영해서 마무리. > git checkout -b (new_branch) / add + commit / master로 checkout / merge new_branch
				/ conflict발생 & 해결 / add + commit + push 끗
			-2. 변경사항 확인한 뒤 임의 저장. 다시 작업 중이던 branch로 checkout하여 작업 수행.
				다시 pull / conflict 해결 / ~ push

fetch + merge = pull


. 충돌? 충돌 해결 add + commit + merge + push / develop_J 삭제 수행

7. 동성 : pull / 다시 수정 / push


pull 로 성공
fetch -> merge 로 성공

*** pull로 상대방 작업 내 작업 비교하고 local master에 최종 merge해서 origin으로 push 할 때 임시 branch 생성/ <> pull request/
	pull request 수락 / merge / 끗
